project (VKBOOTSTRAP C)
cmake_minimum_required(VERSION 3.6.2)
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake")

set(VKBOOTSTRAP_VERSION_MAJOR "0")
set(VKBOOTSTRAP_VERSION_MINOR "1")
set(VKBOOTSTRAP_VERSION "${VKBOOTSTRAP_VERSION_MAJOR}.${VKBOOTSTRAP_VERSION_MINOR}")

option(NINJA_MODE "Enable all warnings" ON)
set (CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})

list(APPEND VKBOOTSTRAP_HEADERS "src/config.h")
list(APPEND VKBOOTSTRAP_INCLUDE_DIRS "include")

find_package(Vulkan REQUIRED)
list(APPEND VKBOOTSTRAP_INCLUDE_DIRS ${Vulkan_INCLUDE_DIRS})
list(APPEND VKBOOTSTRAP_LIBRARIES ${Vulkan_LIBRARIES})

if (UNIX AND NOT APPLE)
    add_definitions(-DHAVE_CONFIG_H)
    find_package(XCB REQUIRED)
    list(APPEND VKBOOTSTRAP_INCLUDE_DIRS ${XCB_INCLUDE_DIRS})
    list(APPEND VKBOOTSTRAP_LIBRARIES ${XCB_LIBRARIES})
    list(APPEND VKBOOTSTRAP_SOURCES "src/main_x11.c")
endif()
if(NINJA_MODE)
    if (CMAKE_C_COMPILER_ID MATCHES "^GNU$")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} --std=c11 -pedantic -Wall -Wextra -Wformat-nonliteral -Wformat-security -Wformat-y2k -Winit-self -Wmissing-include-dirs -Wswitch-default -Wswitch-enum -Wsync-nand -Wstrict-overflow=5 -Wtrampolines -Wfloat-equal -Wdeclaration-after-statement -Wundef -Wshadow -Wunsafe-loop-optimizations -Wbad-function-cast -Wc++-compat -Wcast-qual -Wcast-align -Wwrite-strings -Wconversion -Wsign-conversion -Wlogical-op -Waggregate-return -Wstrict-prototypes -Wold-style-definition -Wnormalized=nfc -Wredundant-decls -Wnested-externs -Winline -Wvla -Wdisabled-optimization -Wmissing-prototypes -Wmissing-declarations")
    elseif(CMAKE_C_COMPILER_ID MATCHES "^MSVC$")
        if(CMAKE_C_FLAGS MATCHES "/W[0-4]")
            string(REGEX REPLACE "/W[0-4]" "/Wall" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
        else()
            set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /Wall")
        endif()
    elseif(CMAKE_C_COMPILER_ID MATCHES "^Clang$")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} --std=c11 -pedantic -Weverything")
    endif()
endif()

include_directories(${VKBOOTSTRAP_INCLUDE_DIRS})
add_executable(vkbootstrap WIN32 ${VKBOOTSTRAP_SOURCES} ${VKBOOTSTRAP_HEADERS})
target_link_libraries(vkbootstrap ${VKBOOTSTRAP_LIBRARIES})
